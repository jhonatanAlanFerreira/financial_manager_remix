// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  login                       String                      @unique
  password                    String
  companies                   Company[]
  expenses                    Expense[]
  transactions                Transaction[]
  logs                        Log[]
  transaction_classifications TransactionClassification[]
  incomes                     Income[]
  accounts                    Account[]
}

model Company {
  id                             String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                           String
  user_id                        String                      @db.ObjectId
  user                           User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expense_ids                    String[]                    @db.ObjectId
  expenses                       Expense[]                   @relation(fields: [expense_ids], references: [id])
  transactions                   Transaction[]
  income_ids                     String[]                    @db.ObjectId
  incomes                        Income[]                    @relation(fields: [income_ids], references: [id])
  transaction_classification_ids String[]                    @db.ObjectId
  transaction_classification     TransactionClassification[] @relation(fields: [transaction_classification_ids], references: [id])
  accounts                       Account[]
}

model Expense {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  amount       Float?
  user_id      String        @db.ObjectId
  is_personal  Boolean       @default(false)
  user         User          @relation(fields: [user_id], references: [id])
  company_ids  String[]      @db.ObjectId
  companies    Company[]     @relation(fields: [company_ids], references: [id])
  transactions Transaction[]
}

model Transaction {
  id                             String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                           String
  amount                         Float
  date               String
  user_id                        String                      @db.ObjectId
  user                           User                        @relation(fields: [user_id], references: [id])
  company_id                     String?                     @db.ObjectId
  company                        Company?                    @relation(fields: [company_id], references: [id])
  file                           File?
  transaction_classification_ids String[]                    @db.ObjectId
  transaction_classifications    TransactionClassification[] @relation(fields: [transaction_classification_ids], references: [id])
  expense_id                     String?                     @db.ObjectId
  expense                        Expense?                    @relation(fields: [expense_id], references: [id])
  income                         Income?                     @relation(fields: [income_id], references: [id])
  income_id                      String?                     @db.ObjectId
  account                        Account                     @relation(fields: [account_id], references: [id])
  account_id                     String                      @db.ObjectId
  is_personal                    Boolean                     @default(false)
  is_income                      Boolean                     @default(false)
}

model TransactionClassification {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  transaction_ids String[]      @db.ObjectId
  transactions    Transaction[] @relation(fields: [transaction_ids], references: [id])
  user_id         String        @db.ObjectId
  user            User          @relation(fields: [user_id], references: [id])
  is_personal     Boolean       @default(false)
  companies       Company[]     @relation(fields: [company_ids], references: [id])
  company_ids     String[]      @db.ObjectId
  is_income       Boolean       @default(false)
}

model Income {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user_id      String        @db.ObjectId
  user         User          @relation(fields: [user_id], references: [id])
  company_ids  String[]      @db.ObjectId
  companies    Company[]     @relation(fields: [company_ids], references: [id])
  transactions Transaction[]
  amount       Float?
  is_personal  Boolean       @default(false)
}

model Account {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  user_id      String        @db.ObjectId
  user         User          @relation(fields: [user_id], references: [id])
  is_personal  Boolean       @default(false)
  company_id   String?       @db.ObjectId
  company      Company?      @relation(fields: [company_id], references: [id])
  balance      Float?
  transactions Transaction[]
}

model File {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  sha1           String      @unique
  transaction_id String      @unique @db.ObjectId
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
}

model Log {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  table             String
  old_value         Json
  changed_date      DateTime         @default(now())
  register_id       Int
  reason            String
  user_id           String           @db.ObjectId
  user              User             @relation(fields: [user_id], references: [id])
  operation_type_id String           @db.ObjectId
  operation_type    LogOperationType @relation(fields: [operation_type_id], references: [id])
}

model LogOperationType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  log  Log[]
}
